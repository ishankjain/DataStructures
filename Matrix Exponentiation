vector<vector<ll>> multiply(vector<vector<ll>> v1,vector<vector<ll>> v2,ll x,ll y,ll z,ll mod){
    vector<vector<ll> > ans( x , vector<ll> (z, 0));
    REP(i,0,x-1){
        REP(j,0,z-1){
            REP(k,0,y-1){
                ans[i][j] += v1[i][k] * v2[k][j];
                ans[i][j] %= mod;
            }
        }
    }
    return ans;
}

vector<vector<ll>> pow(vector<vector<ll>> v, ll x, ll n,ll mod ){
    vector<vector<ll> > res( x , vector<ll> (x, 0));
    REP(i,0,x-1)    res[i][i] = 1;
    REP(i,0,x-1){
        REP(j,0,x-1)
            v[i][j] %=mod;
    }
    while(n>0){
        if(n&1)
            res = multiply(res,v,x,x,x,mod);
        v = multiply(v,v,x,x,x,mod);
        n/=2;
    }
    return res;
}

ll mat_exp(ll n,ll mod){
    // define matrix size below
    ll mat_size = 2;
    // instantiate orignal and multiplicative matrix
    vector<vector<ll> > mul( mat_size , vector<ll> (mat_size, 0));
    vector<vector<ll> > org( 1 , vector<ll> (mat_size, 0));
    mul = pow(mul,mat_size,n,mod);
    org = multiply(org,mul,1,mat_size,mat_size,mod);
    // return the required index
    return org[0][0];
}
